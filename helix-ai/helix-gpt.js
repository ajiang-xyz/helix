var N2=Object.defineProperty;var $2=(P,_)=>{for(var R in _)N2(P,R,{get:_[R],enumerable:!0,configurable:!0,set:(W)=>_[R]=()=>W})};import M2 from"node:events";import{parseArgs as z2} from"util";var H={openai:"Continue the input code from the language <languageId>. Only respond with code.",copilot:"<languageId> completions. Only respond with code.",ollama:"Continue the input code from the language <languageId>. Only respond with code."};var C=[{key:"resolveDiagnostics",label:"Resolve diagnostics",query:"Resolve the diagnostics for this code."},{key:"generateDocs",label:"Generate documentation",query:"Add documentation to this code."},{key:"improveCode",label:"Improve code",query:"Improve this code."},{key:"refactorFromComment",label:"Refactor code from a comment",query:"Refactor this code based on the comment."},{key:"writeTest",label:"Write a unit test",query:"Write a unit test for this code. Do not include any imports."}];var{values:Z}=z2({args:process.argv,options:{numSuggestions:{type:"string",default:"2"},logFile:{type:"string",default:process.env.LOG_FILE??""},handler:{type:"string",default:process.env.HANDLER??"openai"},debounce:{type:"string",default:process.env.DEBOUNCE??"200"},triggerCharacters:{type:"string",default:process.env.TRIGGER_CHARACTERS??"{||(|| "},openaiKey:{type:"string",default:process.env.OPENAI_API_KEY},openaiContext:{type:"string",default:process.env.OPENAI_CONTEXT?.length?process.env.OPENAI_CONTEXT:H.openai},openaiModel:{type:"string",default:process.env.OPENAI_MODEL??"gpt-3.5-turbo-16k"},openaiMaxTokens:{type:"string",default:process.env.OPENAI_MAX_TOKENS??"7000"},openaiEndpoint:{type:"string",default:process.env.OPENAI_ENDPOINT??"https://api.openai.com/v1"},copilotEndpoint:{type:"string",default:process.env.GITHUB_ENDPOINT??"https://api.githubcopilot.com"},copilotContext:{type:"string",default:process.env.COPILOT_CONTEXT?.length?process.env.COPILOT_CONTEXT:H.copilot},copilotModel:{type:"string",default:process.env.COPILOT_MODEL??"gpt-3.5-turbo"},copilotApiKey:{type:"string",default:process.env.COPILOT_API_KEY},authCopilot:{type:"boolean",default:!1},authCodeium:{type:"boolean",default:!1},codeiumApiKey:{type:"string",default:process.env.CODEIUM_API_KEY??"d49954eb-cfba-4992-980f-d8fb37f0e942"},fetchTimeout:{type:"string",default:process.env.FETCH_TIMEOUT??"10000"},actionTimeout:{type:"string",default:process.env.ACTION_TIMEOUT??"10000"},completionTimeout:{type:"string",default:process.env.COMPLETION_TIMEOUT??"10000"},ollamaEndpoint:{type:"string",default:process.env.OLLAMA_ENDPOINT??"http://127.0.0.1:11434"},ollamaModel:{type:"string",default:process.env.OLLAMA_MODEL??"codellama"},ollamaContext:{type:"string",default:process.env.OLLAMA_CONTEXT?.length?process.env.OLLAMA_CONTEXT:H.ollama},ollamaTimeout:{type:"string",default:process.env.OLLAMA_TIMEOUT??"60000"}},strict:!0,allowPositionals:!0});if(!process.env.TEST_RUNNER?.length&&!Z.openaiKey?.length&&!Z.copilotApiKey?.length&&!Z.authCopilot&&!Z.authCodeium&&Z.handler!=="codeium"&&Z.handler!=="ollama")throw new Error("no handler key provided");var N={...Z,triggerCharacters:Z.triggerCharacters.split("||"),debounce:parseInt(Z.debounce),fetchTimeout:parseInt(Z.fetchTimeout),actionTimeout:parseInt(Z.actionTimeout),completionTimeout:parseInt(Z.completionTimeout),numSuggestions:parseInt(Z.numSuggestions)};import G2 from"crypto";import K2 from"fs";var c={},a=(P,_,R)=>{if(c[P])clearTimeout(c[P]);c[P]=setTimeout(_,R)},u=(P)=>{const _=new URLSearchParams(P);return Object.fromEntries(_.entries())},K=(P)=>{return G2.randomBytes(P/2).toString("hex")},n=()=>{return K(8)+"-"+K(4)+"-"+K(4)+"-"+K(4)+"-"+K(12)},l=async(P,_,R)=>{const W=P?.split("\n").slice(0,_+1);W[W.length-1]=W[W.length-1].split("").slice(0,R).join("");const F=W[W.length-1],J=W.join("\n"),G=P?.split("\n").slice(_+1).join("\n"),M=J.slice(-1),O=P?.split("\n")[_].slice(R);return{contentBefore:J,contentAfter:G,lastCharacter:M,lastLine:F,contentImmediatelyAfter:O}},g,$=(...P)=>{if(!N.logFile)return;if(process.env.TEST_RUNNER)console.log(s(...P));else if(N.logFile?.length){if(!g)g=K2.createWriteStream(N.logFile);try{g.write(s(...P)+"\n\n")}catch(_){}}},s=(...P)=>{let _=[];return P.forEach((R)=>{_.push(R),_.push("|")}),_=_.slice(0,_.length-1),["APP",(new Date()).toISOString(),"-->",..._].join(" ")},U=(P)=>{return Array.from(new Set(P))},t=(P)=>{if(!P?.length)return{};const _={},R=P.split(";");for(let W of R){const[F,J]=W.split("=");_[F]=J}return _},e=()=>{return Math.floor(Date.now()/1000)},D=(P,_,R)=>{const W=new RegExp(`\`\`\`${R}([\\s\\S]*?)\`\`\``,"g");let F;const J=[];while((F=W.exec(_))!==null)J.push(F[0]);const G=J[0];if(!G?.length)return;const M=G?.replace(`// FILEPATH: ${P.replace("file://","")}\n`,"")?.split("\n");return M?.slice(1,M.length-1)?.join("\n")+"\n"};var T;(function(z){z["DidOpen"]="textDocument/didOpen";z["DidChange"]="textDocument/didChange";z["Completion"]="textDocument/completion";z["CodeAction"]="textDocument/codeAction";z["ApplyEdit"]="workspace/applyEdit";z["ExecuteCommand"]="workspace/executeCommand";z["Initialize"]="initialize";z["Shutdown"]="shutdown";z["Exit"]="exit";z["PublishDiagnostics"]="textDocument/publishDiagnostics"})(T||(T={}));var w;(function(F){F[F["Error"]=1]="Error";F[F["Warning"]=2]="Warning";F[F["Information"]=3]="Information";F[F["Hint"]=4]="Hint"})(w||(w={}));class P2{emitter;capabilities;currentUri;buffers;constructor({capabilities:P}){this.emitter=new M2({captureRejections:!0}),this.capabilities=P,this.buffers={},$("triggerCharacters:",JSON.stringify(P?.completionProvider?.triggerCharacters)),this.registerDefault()}registerDefault(){this.emitter.on("error",(P)=>{$("lsp-event-emitter error",P.message)}),this.on(T.Initialize,async({ctx:P,request:_})=>{P.send({id:_.id,result:{capabilities:this.capabilities}})}),this.on(T.DidOpen,({ctx:P,request:_})=>{const{uri:R,text:W,languageId:F}=_.params.textDocument;this.buffers[R]={uri:R,text:W,languageId:F,version:0},this.currentUri=R,$("received didOpen",`language: ${F}`)}),this.on(T.Shutdown,()=>{$("received shutdown request"),process.exit(0)}),this.on(T.DidChange,async({ctx:P,request:_})=>{const{uri:R,version:W}=_.params.textDocument;this.buffers[R]={...this.buffers[R],version:W,text:_.params.contentChanges[0].text},this.currentUri=R,$("received didChange",`language: ${this.buffers[R].languageId}`,`contentVersion: ${W}`,`uri: ${R}`)})}getContentPadding(P){return P.split("\n").reduce((W,F)=>{if(F.trim().length===0)return W;const G=F.match(/^\s+/)?.[0].length||0;return Math.min(G,W)},99999)}padContent(P,_){return P.split("\n").map((R)=>{if(R.trim().length===0)return R;return" ".repeat(_)+R}).join("\n")}registerEventHandlers(P){Object.values(P).forEach((_)=>{_(this)})}getContentFromRange(P){$("getting content from range",JSON.stringify(P),`uri: ${this.currentUri}`,`current buffers: ${JSON.stringify(Object.keys(this.buffers))}`);const{start:_,end:R}=P;return this.buffers[this.currentUri]?.text?.split("\n")?.slice(_.line,R.line).join("\n")}positionalUpdate(P,_,R){const F=this.buffers[P]?.text?.split("\n"),J=R.start.line,G=R.end.line,M=F[J],O=F[G],j=M?.substring(0,R.start.character),z=O?.substring(R.end.character),X=[j+_+z],q=F.reduce((Y,L,B)=>{if(B<J||B>G)Y.push(L);else if(B===J)Y.push(X[0]);return Y},[]);this.buffers[P].text=q.join("\n")}on(P,_){this.emitter.on(P,async(R)=>{try{await _({ctx:this,request:R})}catch(W){$("error in event",JSON.stringify(R),W.message)}})}send({method:P,id:_,result:R,params:W}){const F=JSON.stringify({jsonrpc:"2.0",method:P,id:_,result:R,params:W}),J=(new TextEncoder()).encode(F).length;process.stdout.write(`Content-Length: ${J}\r\n\r\n${F}`),$("sent request",F)}sendDiagnostics(P,_=0){$("sending diagnostics",JSON.stringify(P));const R={uri:this.currentUri,diagnostics:P.map((W)=>{return W.source="helix-gpt",W})};if(this.send({method:T.PublishDiagnostics,params:R}),_>0)setTimeout(()=>{this.send({method:T.PublishDiagnostics,params:{uri:this.currentUri,diagnostics:[]}})},_)}resetDiagnostics(){this.send({method:T.PublishDiagnostics,params:{uri:this.currentUri,diagnostics:[]}})}parseLine(P){const _=P.split("\r\n");for(let R of _)try{return JSON.parse(R)}catch(W){}throw new Error("failed to parse")}async receiveLine(P){try{const _=this.parseLine(P);if(![T.DidChange,T.DidOpen].includes(_.method))$("received request:",JSON.stringify(_));this.emitter.emit(_.method,_)}catch(_){$("failed to parse line:",_.message,P)}}async start(){for await(let P of process.stdin.stream()){const _=Buffer.from(P).toString();this.receiveLine(_)}}}var _2={Service:P2,Event:T,DiagnosticSeverity:w};var i={};$2(i,{completions:()=>{{return O2}},actions:()=>{{return Z2}}});var o={},T2=(P,_)=>{o[P]=_},R2=(P)=>{if(!o[N.handler]){const _=`no provider: ${N.handler}`;throw $(_),new Error(_)}return o[N.handler]},X2=async(...P)=>{$(N.handler,"chat request",JSON.stringify(P));const _=R2(N.handler);if(!_.chat){const R=`No chat provider for: ${N.handler}`;throw $(R),new Error(R)}return _.chat(...P)},Y2=async(...P)=>{$(N.handler,"completion request");const _=R2(N.handler);if(!_.completion){const R=`No completion provider for: ${N.handler}`;throw $(R),new Error(R)}return _.completion(...P)},V={chat:X2,completion:Y2,registerProvider:T2};var Z2=(P)=>{P.on(T.ExecuteCommand,async({ctx:_,request:R})=>{const{command:W}=R.params,{diagnostics:F,range:J}=R.params.arguments[0];let{query:G}=R.params.arguments[0];_.sendDiagnostics([{message:`Executing ${W}...`,range:J,severity:w.Information}],N.actionTimeout);const M=_.getContentFromRange(J),O=_.getContentPadding(M),j=_.buffers[_.currentUri];if($("chat request content:",M),F?.length)G+="\n\nDiagnostics: "+F.join("\n- ");try{var{result:z}=await V.chat(G,M,_.currentUri,j?.languageId);if(!z?.length)throw new Error("No completion found")}catch(X){return $("chat failed",X.message),_.sendDiagnostics([{message:X.message,severity:w.Error,range:J}],N.actionTimeout)}z=_.padContent(z.trim(),O)+"\n",$("received chat result:",z),_.send({method:T.ApplyEdit,id:R.id,params:{label:W,edit:{changes:{[_.currentUri]:[{range:J,newText:z}]}}}}),_.resetDiagnostics()}),P.on(T.CodeAction,({ctx:_,request:R})=>{_.currentUri=R.params.textDocument.uri,_.send({id:R.id,result:C.map((W)=>({title:W.label,kind:"quickfix",diagnostics:[],command:{title:W.label,command:W.key,arguments:[{range:R.params.range,query:W.query,diagnostics:R.params.context?.diagnostics?.map((F)=>F.message)}]}}))})})};var O2=(P)=>{P.on(T.Completion,async({ctx:R,request:W})=>{const F=R.buffers[W.params.textDocument.uri],J=F.version,{lastCharacter:G}=await l(F.text,W.params.position.line,W.params.position.character);if(G==".")return R.send({id:W.id,result:{isIncomplete:!1,items:[]}});a("completion",async()=>{try{await _({ctx:R,request:W,lastContentVersion:J})}catch(M){$("error in completion event",M.message),R.sendDiagnostics([{message:M.message,severity:w.Error,range:{start:{line:W.params.position.line,character:0},end:{line:W.params.position.line+1,character:0}}}],N.completionTimeout)}},N.debounce)});const _=async({ctx:R,request:W,lastContentVersion:F})=>{const J=()=>{R.resetDiagnostics(),R.send({id:W.id,result:{isIncomplete:!1,items:[]}})},G=R.buffers[W.params.textDocument.uri];if($("running completion on buffer",JSON.stringify(G)),G.version>F)return $("skipping because content is stale"),J();const{lastLine:M,contentBefore:O,contentAfter:j,contentImmediatelyAfter:z}=await l(G.text,W.params.position.line,W.params.position.character);$("calling completion event"),R.sendDiagnostics([{message:"Fetching completion...",severity:w.Information,range:{start:{line:W.params.position.line,character:0},end:{line:W.params.position.line+1,character:0}}}],N.completionTimeout);try{var X=await V.completion({contentBefore:O,contentAfter:j},R.currentUri,G?.languageId)}catch(Y){return R.sendDiagnostics([{message:Y.message,severity:w.Error,range:{start:{line:W.params.position.line,character:0},end:{line:W.params.position.line+1,character:0}}}],N.completionTimeout)}$("completion hints:",X);const q=X?.map((Y)=>{if(Y=Y.trim(),Y.startsWith(M.trim()))Y=Y.slice(M.trim().length).trim();const L=Y.split("\n"),B=W.params.position.line+L.length-1;let d=L.slice(-1)[0].length;if(B==W.params.position.line)d+=W.params.position.character;return{label:L[0].length>20?L[0]:Y.slice(0,20).trim(),kind:1,preselect:!0,detail:Y,insertText:Y,insertTextFormat:1,additionalTextEdits:[{newText:"",range:{start:{line:B,character:d},end:{line:B,character:d+z?.length}}}]}});R.send({id:W.id,result:{isIncomplete:!1,items:q}}),R.resetDiagnostics()}};class Q{url;headers;params;controller;constructor({url:P,headers:_,params:R}){this.url=P,this.headers=_||{},this.params=R||{},this.controller=new AbortController}async fetch(P,_,R=N.fetchTimeout){return new Promise(async(W,F)=>{setTimeout(()=>{this.controller.abort(),F(new Error("timeout"))},R);try{const J=await fetch(P,_);W(J)}catch(J){if(J.name==="AbortError")F({message:""});F(J)}})}async request(P){const{endpoint:_,method:R,body:W,headers:F,params:J,url:G,timeout:M}=P;let O=new URL(_,G||this.url);if($("fetch",_),J)Object.keys(J).forEach((X)=>O.searchParams.append(X,J[X]));Object.keys(this.params).forEach((X)=>{O.searchParams.append(X,this.params[X])}),this.controller.abort(),this.controller=new AbortController;let j={headers:{...this.headers,...F},method:R,body:null,signal:this.controller.signal};if(W)j.body=JSON.stringify(W);const z=await this.fetch(O.toString(),j,M);if(!z.ok){let X=await z.text();throw new Error(`Fetch failed with status ${z.status} body ${X} url: ${P.endpoint}`)}if($("response",O,z.status),P.text)return await z.text();return await z.json()}}class I{deviceCode;userCode;verificationUri;expiresIn;interval;message;constructor(P){this.deviceCode=P.device_code,this.userCode=P.user_code,this.verificationUri=P.verification_uri,this.expiresIn=P.expires_in,this.interval=P.interval,this.message=P.message}static fromResponse(P){const _=u(P);return new I(_)}}class E{accessToken;tokenType;scope;constructor(P){this.accessToken=P.access_token,this.tokenType=P.token_type,this.scope=P.scope}static fromResponse(P){const _=u(P);return new E(_)}}class b{exp;raw;constructor(P){this.exp=P.exp,this.raw=P.raw}static fromResponse(P){const _=t(P?.token);return new b({exp:parseInt(_.exp),raw:P?.token})}}class S extends Array{constructor(...P){super();this.push(...U(P))}static fromResponse(P){const _=P.split("\n").map((W)=>W.slice(5)).map((W)=>{try{return JSON.parse(W).choices[0]}catch(F){return null}}).filter((W)=>W).reduce(function(W,F){return W[F.index]=W[F.index]||[],W[F.index].push(F),W},Object.create(null)),R=Object.values(_).map((W)=>W.map((F)=>F.text).join(""));return new S(...R)}}class h{result;constructor(P){this.result=P}static fromResponse(P,_,R){const W=P?.choices?.map((J)=>J.message?.content),F=D(_,W[0],R);return new h(F)}}class A extends Q{copilotSession;constructor(){super({url:"https://github.com",headers:{"Content-Type":"application/json"}})}async deviceCode(){const P=await this.request({method:"POST",endpoint:"/login/device/code",text:!0,params:{scope:"read:user",client_id:"Iv1.b507a08c87ecfe98"}});return I.fromResponse(P)}async accessToken(P){const _=await this.request({method:"POST",endpoint:"/login/oauth/access_token",text:!0,params:{client_id:"Iv1.b507a08c87ecfe98",device_code:P,grant_type:"urn:ietf:params:oauth:grant-type:device_code"}});return E.fromResponse(_)}async refreshCopilotSession(){if(this.copilotSession?.exp&&this.copilotSession?.exp>=e())return;const P=await this.request({method:"GET",url:"https://api.github.com",endpoint:"/copilot_internal/v2/token",headers:{Authorization:`Bearer ${N.copilotApiKey}`,"Editor-Version":"helix/1.0.0","Editor-Plugin-Version":"helix-gpt/1.0.0","User-Agent":"helix/1.0.0"}});this.copilotSession=b.fromResponse(P)}async chat(P,_,R,W){await this.refreshCopilotSession();const J={intent:!0,max_tokens:7909,model:"gpt-4",n:1,stream:!1,temperature:0.1,top_p:1,messages:[{content:`You are an AI programming assistant.\nWhen asked for your name, you must respond with \"GitHub Copilot\".\nFollow the user's requirements carefully & to the letter.\n- Each code block starts with \`\`\` and // FILEPATH.\n- You always answer with ${W} code.\n- When the user asks you to document something, you must answer in the form of a ${W} code block.\nYour expertise is strictly limited to software development topics.\nFor questions not related to software development, simply give a reminder that you are an AI programming assistant.\nKeep your answers short and impersonal.`,role:"system"},{content:`I have the following code in the selection:\n\`\`\`${W}\n// FILEPATH: ${R.replace("file://","")}\n${_}`,role:"user"},{content:P,role:"user"}]},G={"Content-Type":"application/json; charset=utf-8","User-Agent":"helix/1.0.0",Authorization:`Bearer ${this.copilotSession?.raw}`,"Editor-Plugin-Version":"copilot-chat/0.24.1","Editor-Version":"vscode/1.99","Openai-Intent":"conversation-panel","Openai-Organization":"github-copilot","VScode-MachineId":K(64),"VScode-SessionId":K(8)+"-"+K(4)+"-"+K(4)+"-"+K(4)+"-"+K(25),"X-Request-Id":K(8)+"-"+K(4)+"-"+K(4)+"-"+K(4)+"-"+K(12),"Accept-Encoding":"gzip,deflate,br",Accept:"*/*",Connection:"close"},M=await this.request({method:"POST",body:J,headers:G,url:"https://api.githubcopilot.com",endpoint:"/chat/completions"});return h.fromResponse(M,R,W)}async completion(P,_,R){await this.refreshCopilotSession();const W={"Content-Type":"application/json; charset=utf-8","User-Agent":"helix/1.0.0",Authorization:`Bearer ${this.copilotSession?.raw}`,"Editor-Plugin-Version":"copilot-chat/0.24.1","Editor-Version":"vscode/1.99","Openai-Intent":"copilot-ghost","Openai-Organization":"github-copilot","VScode-MachineId":K(64),"VScode-SessionId":K(8)+"-"+K(4)+"-"+K(4)+"-"+K(4)+"-"+K(25),"X-Request-Id":K(8)+"-"+K(4)+"-"+K(4)+"-"+K(4)+"-"+K(12),"Accept-Encoding":"gzip,deflate,br",Accept:"*/*"},F={extra:{language:R,next_indent:0,prompt_tokens:500,suffix_tokens:400,trim_by_indentation:!0},max_tokens:500,n:N.numSuggestions,nwo:"app",prompt:`// Path: ${_.replace("file://","")}\n${P.contentBefore}`,stop:["\n\n"],stream:!0,suffix:P.contentAfter,temperature:N.numSuggestions>1?0.4:0,top_p:1},J=await this.request({method:"POST",body:F,headers:W,text:!0,url:"https://proxy.individual.githubcopilot.com",endpoint:"/v1/engines/gpt-4o-copilot/completions"});return S.fromResponse(J)}}var W2=async()=>{const P=new A,_=await P.deviceCode();console.log(`Visit: ${_.verificationUri} in your browser and enter: ${_.userCode}`);while(!0){await new Promise((W)=>setTimeout(W,5000));const R=await P.accessToken(_.deviceCode);if(R?.accessToken?.length){console.log("\n\nGot token:",R.accessToken,"\n\n","Store this in the COPILOT_API_KEY environment variable");break}console.log("Waiting for user authorization...")}};class r extends Array{constructor(...P){super();this.push(...U(P))}static fromResponse(P){return P.completionItems?.map((_)=>_.completion.text)}}var V2={unspecified:0,c:1,clojure:2,coffeescript:3,cpp:4,csharp:5,css:6,cudacpp:7,dockerfile:8,go:9,groovy:10,handlebars:11,haskell:12,hcl:13,html:14,ini:15,java:16,javascript:17,json:18,julia:19,kotlin:20,latex:21,less:22,lua:23,makefile:24,markdown:25,objectivec:26,objectivecpp:27,perl:28,php:29,plaintext:30,protobuf:31,pbtxt:32,python:33,r:34,ruby:35,rust:36,sass:37,scala:38,scss:39,shell:40,sql:41,starlark:42,swift:43,tsx:44,typescript:45,visualbasic:46,vue:47,xml:48,xsl:49,yaml:50,svelte:51,toml:52,dart:53,rst:54,ocaml:55,cmake:56,pascal:57,elixir:58,fsharp:59,lisp:60,matlab:61,powershell:62,solidity:63,ada:64,ocaml_interface:65};class k extends Q{sessionId;apiKey;constructor(P=N.codeiumApiKey){super({url:"https://web-backend.codeium.com",headers:{"Content-Type":"application/json"}});this.sessionId=n(),this.apiKey=P}authUrl(){return`https://codeium.com/profile?response_type=token&redirect_uri=vim-show-auth-token&state=${this.sessionId}&scope=openid%20profile%20email&redirect_parameters_type=query`}async register(P){const _={"Content-Type":"application/json"},R={firebase_id_token:P};return(await this.request({method:"POST",headers:_,url:"https://api.codeium.com",endpoint:"/register_user/",body:R}))?.api_key}async completion(P,_,R){const W={"Content-Type":"application/json",Authorization:`Basic ${this.apiKey}-${this.sessionId}`};_=_.replace("file://","");const F={metadata:{ideName:"web",ideVersion:"unknown",extensionVersion:"1.6.13",extensionName:"helix-gpt",apiKey:this.apiKey,sessionId:this.sessionId},document:{editor_language:R,language:V2[R],cursor_offset:P.contentBefore.length,line_ending:"\n",absolute_path:_,relative_path:_,text:P.contentBefore+"\n"+P.contentAfter},editor_options:{tab_size:2,insert_spaces:!0},other_documents:[]},J=await this.request({method:"POST",body:F,headers:W,endpoint:"/exa.language_server_pb.LanguageServerService/GetCompletions"});return r.fromResponse(J).slice(0,N.numSuggestions)}}var F2=async()=>{const P=new k,_=P.authUrl();console.log(`Visit the following URL and enter the token below: ${_}`);const R=prompt("Token: "),W=await P.register(R?.trim());console.log(`\nCodeium API key: ${W}`)};class m extends Array{constructor(...P){super();this.push(...U(P))}static fromResponse(P){const _=P?.choices?.map((R)=>R.message.content);return new m(..._)}}class f{result;constructor(P){this.result=P}static fromResponse(P,_,R){const W=P?.choices?.map((J)=>J.message?.content),F=D(_,W[0],R);return new f(F)}}class y extends Q{constructor(){super({url:N.openaiEndpoint,headers:{"Content-Type":"application/json",Authorization:`Bearer ${N.openaiKey}`}})}async chat(P,_,R,W){const J={max_tokens:7909,model:"gpt-4",n:1,stream:!1,temperature:0.1,top_p:1,messages:[{content:`You are an AI programming assistant.\nWhen asked for your name, you must respond with \"GitHub Copilot\".\nFollow the user's requirements carefully & to the letter.\n- Each code block starts with \`\`\` and // FILEPATH.\n- You always answer with ${W} code.\n- When the user asks you to document something, you must answer in the form of a ${W} code block.\nYour expertise is strictly limited to software development topics.\nFor questions not related to software development, simply give a reminder that you are an AI programming assistant.\nKeep your answers short and impersonal.`,role:"system"},{content:`I have the following code in the selection:\n\`\`\`${W}\n// FILEPATH: ${R.replace("file://","")}\n${_}`,role:"user"},{content:P,role:"user"}]},G=await this.request({method:"POST",body:J,endpoint:"/v1/chat/completions",timeout:1e4});return f.fromResponse(G,R,W)}async completion(P,_,R){const W=[{role:"system",content:N.openaiContext?.replace("<languageId>",R)+"\n\n"+`End of file context:\n\n${P.contentAfter}`},{role:"user",content:`Start of file context:\n\n${P.contentBefore}`}],F={model:N.openaiModel,max_tokens:parseInt(N.openaiMaxTokens),n:N.numSuggestions,temperature:suggestions>1?0.4:0,top_p:1,frequency_penalty:1,presence_penalty:2,messages:W},J=await this.request({method:"POST",body:F,endpoint:"/v1/chat/completions"});return m.fromResponse(J)}}class v extends Array{constructor(...P){super();this.push(...U(P))}static fromResponse(P){return new v(P.message.content)}}class x{result;constructor(P){this.result=P}static fromResponse(P,_,R){const W=P.message.content,F=D(_,W,R);return new x(F)}}class p extends Q{timeout;model;constructor(){super({url:N.ollamaEndpoint,headers:{"Content-Type":"application/json"}});this.timeout=parseInt(N.ollamaTimeout,10),this.model=N.ollamaModel}async chat(P,_,R,W){const F=[{content:`You are an AI programming assistant.\nWhen asked for your name, you must respond with \"GitHub Copilot\".\nFollow the user's requirements carefully & to the letter.\n- Each code block starts with \`\`\` and // FILEPATH.\n- You always answer with ${W} code.\n- When the user asks you to document something, you must answer in the form of a ${W} code block.\nYour expertise is strictly limited to software development topics.\nFor questions not related to software development, simply give a reminder that you are an AI programming assistant.\nKeep your answers short and impersonal.`,role:"system"},{content:`I have the following code in the selection:\n\`\`\`${W}\n// FILEPATH: ${R.replace("file://","")}\n${_}`,role:"user"},{content:P,role:"user"}];$("prompt",F.map((M)=>`role: ${M.role}\n${M.content}`).join("\n"));const J={model:this.model,stream:!1,messages:F},G=await this.request({method:"POST",body:J,endpoint:"/api/chat",timeout:this.timeout});return $("content",G.message.content),x.fromResponse(G,R,W)}async completion(P,_,R){const W=[{role:"system",content:N.ollamaContext?.replace("<languageId>",R)+"\n\n"+`End of file context:\n\n${P.contentAfter}`},{role:"user",content:`Start of file context:\n\n${P.contentBefore}`}];$("prompt",W.map((G)=>`role: ${G.role}\n${G.content}`).join("\n"));const F={model:this.model,stream:!1,messages:W},J=await this.request({method:"POST",body:F,endpoint:"/api/chat",timeout:this.timeout});return $("content",J.message.content),v.fromResponse(J)}}if(N.authCopilot)await W2(),process.exit(0);if(N.authCodeium)await F2(),process.exit(0);V.registerProvider("copilot",new A);V.registerProvider("openai",new y);V.registerProvider("codeium",new k);V.registerProvider("ollama",new p);var J2=new _2.Service({capabilities:{codeActionProvider:!0,executeCommandProvider:{commands:C.map((P)=>P.key)},completionProvider:{resolveProvider:!1,triggerCharacters:N.triggerCharacters},textDocumentSync:{change:1,openClose:!0}}});J2.registerEventHandlers(i);try{await J2.start()}catch(P){$("lsp-service error",P.message)}
